


(\x.x(x(x(x(\t.t)))))((\x,y.yx)(\x,y.x(x(x(xy)))))



-- unparseWrap :: Lambda -> String
-- unparseWrap l
--   | equiv l combinatorI = "I"
--   | equiv l combinatorK = "K"
--   | equiv l combinatorK' = "K*"
--   | equiv l combinatorS = "S"
--   | equiv l combinatorY = "Y"
--   | equiv l combinatorOmega = "O"
-- unparseWrap (Var n)
--   | n < length varSet = [varSet !! n]
--   | otherwise = varSetFormal !! n
-- unparseWrap (Abst n (Abst m l)) = "\\" ++ unparseWrap (Var n) ++ "," ++ (tail . unparseWrap) (Abst m l)
-- unparseWrap (Abst n l) = "\\" ++ unparseWrap (Var n) ++ ". " ++ wrapAbst unparseWrap l
-- unparseWrap (Appl l1 l2) = wrapAbst unparseWrap l1 ++ wrapNotVar unparseWrap l2


-- unparseWithoutSpaces :: Lambda -> String
-- unparseWithoutSpaces (Var n)
--   | n < length varSet = [varSet !! n]
--   | otherwise = varSetFormal !! n
-- unparseWithoutSpaces (Abst n (Abst m l)) =
--   "\\" ++ unparseWithoutSpaces (Var n) ++ "," ++ (tail . unparseWithoutSpaces) (Abst m l)
-- unparseWithoutSpaces (Abst n l) =
--   "\\" ++ unparseWithoutSpaces (Var n) ++ "." ++ wrapAbst unparseWithoutSpaces l
-- unparseWithoutSpaces (Appl l1 l2) =
--   wrapAbst unparseWithoutSpaces l1 ++ wrapNotVar unparseWithoutSpaces l2
-- unparseWithoutSpaces = removeSpaces . unparse
--   where
--     removeSpaces :: String -> String
--     removeSpaces [] = []
--     removeSpaces (' ':rest) = removeSpaces rest
--     removeSpaces (char:rest) = char : removeSpaces rest



-- unparse' :: Lambda -> String
-- unparse' = replaceChar ('.',". ") . unparse
--
-- unparseWrap' :: Lambda -> String
-- unparseWrap' = replaceChar ('.',". ") . unparse



    -- | n `notElem` tv2 = Abst n (substitute' l1' m l2')

      -- where
      --   tv2 = boundVarSet l2'
      --   l2' = changeBoundVar l2' n (1 + maximum tv2)

      -- if member rest modeMap
      -- then loop (modeMap ! rest) history bindings
      -- else do
      --   printError "Invalid mode" rest
      --   loop mode history bindings


      -- f n (',' : rest') = raise Abst (Just n) (parse' ('\\' : rest'))

-- calibrateLengthPre :: Int -> Char -> String -> String
-- calibrateLengthPre n rep str
--   | len > n = str
--   | otherwise = replicate (n - len) rep ++ str
--   where
--     len = length str

-- replaceChar _ [] = []
-- replaceChar (from, to) (char:rest)
--   | char == from = "(" ++ to ++ ")" ++ replaceChar (from, to) rest
--   | otherwise = char : replaceChar (from, to) rest

-- prefixLength :: (Eq a) => [a] -> [a] -> Int
-- prefixLength [] _ = 0
-- prefixLength _ [] = 0
-- prefixLength (x : xs) (y : ys)
--   | x == y = 1 + prefixLength xs ys
--   | otherwise = 0

-- checkCondition :: (a -> Bool) -> a -> Maybe a
-- checkCondition f a = if f a then Just a else Nothing

-- findMax :: (Ord a, Num a) => [a] -> a
-- findMax [] = 0
-- findMax s = maximum s
--
-- delete :: (Eq a) => a -> [a] -> [a]
-- delete a = filter (/= a)
--
-- insert :: (Eq a) => a -> [a] -> [a]
-- insert a as = nub $ a : as
--
-- union :: (Eq a) => [a] -> [a] -> [a]
-- union as bs = nub $ as ++ bs
--
-- intersection :: (Eq a) => [a] -> [a] -> [a]
-- intersection as = filter (`elem` as)

  -- | null rest = Nothing
  -- | var == 'v' =
  --   let 
  --   let n = prefixLength rest (repeat '\'')
  --       tempstr = drop n rest
  --       rest' = if null tempstr then [] else case head tempstr of
  --           ',' -> '\\' : tail tempstr
  --           '.' -> tail tempstr
  --           _ -> tempstr
  --    in raise Abst (Just n) (parse rest')
  -- | head rest == ',' = raise Abst (elemIndex var varSet) (parse $ '\\' : tail rest)
  -- | head rest == '.' = raise Abst (elemIndex var varSet) (parse $ rest)
  -- | otherwise = Nothing


-- $conversion
-- ┌─────────────────────────────────────────┐
-- │ Converting formal and informal notation │
-- └─────────────────────────────────────────┘

-- parseFormal' :: String -> Maybe Lambda
-- parseFormal' str = parseFormal (preprocess str) >>= checkCondition isValid

-- _toInformal' :: String -> IO ()
-- _toInformal' = putStrLn . unparse . fromJust . parseFormal'

-- parseFormal :: String -> Maybe Lambda
-- parseFormal [] = Nothing
-- parseFormal str
--   | (head str == 'v') && (tail str == replicate n '\'') = Just (Var n)
--   where
--     n = length str - 1
-- parseFormal ('(' : '\\' : 'v' : rest) = maybeAbst n (parseFormal $ init $ drop n rest)
--   where
--     n = prefixLength rest (repeat '\'')
-- parseFormal ('(' : rest)
--   | length objects /= 2 = Nothing
--   | otherwise = maybeAppl (parseFormal $ head objects) (parseFormal $ last objects)
--   where
--     objects = getCombinedTerms $ init rest
-- parseFormal _ = Nothing

-- (&&&) :: (a -> Bool) -> (a -> Bool) -> (a -> Bool)
-- (&&&) f g x = f x && g x

-- (...) :: (Monad m) => (b -> m c) -> (a -> m b) -> a -> m c
-- (...) g f x = f x >>= g
--
-- infixr 9 ...

-- preprocess ('\\':var:',':' ':rest) = preprocess $ '\\' : var : ',' : rest
-- preprocess ('\\':var:'.':' ':' ': rest) = preprocess $ '\\' : var : '.' : ' ' : rest
-- preprocess ('\\':var:'.':' ': rest) = '\\' : var : '.' : ' ' : preprocess rest

-- parse (' ' : rest) = parse rest
-- parse ('\\' : var : ',' : ' ' : rest) = parse ('\\' : var : ',' : rest)
-- parse ('\\' : var : '.' : ' ' : rest) = parse ('\\' : var : '.' : rest)

-- maybeAbst :: Variable -> Maybe Lambda -> Maybe Lambda
-- maybeAbst _ Nothing = Nothing
-- maybeAbst n (Just l) = Just $ Abst n l
--
-- maybeAppl :: Maybe Lambda -> Maybe Lambda -> Maybe Lambda
-- maybeAppl Nothing _ = Nothing
-- maybeAppl _ Nothing = Nothing
-- maybeAppl (Just l1) (Just l2) = Just $ Appl l1 l2

-- toFormal :: String -> String
-- toFormal [] = []
-- toFormal [var]
--   | var `elem` varSet' =
--       let order = fromJust $ elemIndex var varSet'
--        in varSet !! order
--   | otherwise = [var]
-- toFormal ('\\' : var : '.' : ' ' : rest) = "(\\" ++ toFormal [var] ++ toFormal rest ++ ")"
-- toFormal ('\\' : var : ',' : rest) = "(\\" ++ toFormal [var] ++ toFormal ('\\' : rest) ++ ")"
-- toFormal expr
--   | null objects = []
--   | length objects == 1 =
--       let object = head objects
--           braced = ('(' == head object) && (')' == last object)
--           object' = if braced then (tail . init) object else object
--        in toFormal object'
--   | otherwise =
--       let operator = join $ init objects
--           operand = last objects
--        in "(" ++ toFormal operator ++ toFormal operand ++ ")"
--   where
--     objects = getCombinedTerms expr

-- [TODO]
-- fromFormal :: String -> String
-- fromFormal = id

-- $maybe
-- ┌─────────────────────────────────────┐
-- │ Adding failing conditions via Maybe │
-- └─────────────────────────────────────┘

-- io :: Maybe String -> IO ()
-- io Nothing = putStrLn "error: invalid input"
-- io (Just str) = putStrLn str

-- (+++) :: (Eq a) => Maybe [a] -> Maybe [a] -> Maybe [a]
-- (+++) s1 s2
--   | isNothing s1 || isNothing s2 = Nothing
--   | otherwise = Just (fromJust s1 ++ fromJust s2)

-- toFormalMaybe :: String -> Maybe String
-- toFormalMaybe [] = Nothing
-- toFormalMaybe [var]
--   | var `elem` varSet' =
--       let order = fromJust $ elemIndex var varSet'
--        in Just (varSet !! order)
--   | otherwise = Nothing
-- toFormalMaybe ('\\' : var : '.' : ' ' : rest) =
--   Just "(\\" +++ toFormalMaybe [var] +++ toFormalMaybe rest +++ Just ")"
-- toFormalMaybe ('\\' : var : ',' : rest) =
--   Just "(\\" +++ toFormalMaybe [var] +++ toFormalMaybe ('\\' : rest) +++ Just ")"
-- toFormalMaybe expr
--   | null objects = Just []
--   | length objects > 1 = Just "(" +++ toFormalMaybe operator +++ toFormalMaybe operand +++ Just ")"
--   | otherwise =
--       let object = head objects
--           braced = ('(' == head object) && (')' == last object)
--           object' = if braced then tail $ init object else object
--        in Just "(" +++ toFormalMaybe object' +++ Just ")"
--   where
--     objects = getCombinedTerms expr
--     operator = join $ init objects
--     operand = last objects

-- [TODO]
-- fromFormalMaybe :: String -> Maybe String
-- fromFormalMaybe = Just

-- apply :: Lambda -> String -> Maybe Lambda
-- apply l s = reduce . Appl l <$> parse' s
--
-- _apply :: Lambda -> String -> IO ()
-- _apply l str = io unparse' $ apply l str
-- -- _apply l = putStrLn . unparse' . apply l
--
-- _toFormal' :: String -> IO ()
-- _toFormal' = io unparseFormal . parse'
-- -- _toFormal' = putStrLn . unparseFormal . parse'
--
-- _toInformal' :: String -> IO ()
-- _toInformal' = io unparse . parse'
-- -- _toInformal' = putStrLn . unparse' . parse'
--
-- _print :: String -> IO ()
-- _print = io unparse' . parse'
--
-- _substitute :: String -> String -> String -> IO ()
-- _substitute s1 s2 s3 = io unparse' $ sub l1 l2 l3
--   where
--     l1 = parse s1
--     l2 = parse s2
--     l3 = parse s3
--     sub :: Maybe Lambda -> Maybe Lambda -> Maybe Lambda -> Maybe Lambda
--     sub l1' (Just (Var n)) l3' = raise (`substitute` n) l1' l3'
--     sub _ _ _ = Nothing
--
-- _reduce :: String -> IO ()
-- _reduce = io (unparse' . reduce) . parse'
--
-- _reduce' :: Lambda -> IO ()
-- _reduce' = io (unparse' . reduce) . Just
--
-- _reduceTimes :: Int -> String -> IO ()
-- _reduceTimes n = io (unparse' . reduceTimes n) . parse'
--
-- _reduceTimes' :: Int -> Lambda -> IO ()
-- _reduceTimes' n = io (unparse' . reduceTimes n) . Just
--
-- _equiv :: String -> String -> IO ()
-- _equiv s1 s2 = print $ raise equiv (parse' s1) (parse' s2)
--
-- _equiv' :: String -> String -> IO ()
-- _equiv' s1 s2 = print $ raise equiv' (parse' s1) (parse' s2)



    -- Just "" -> loop mode
    -- Just (':':'r':'s':' ':rest) -> evalOnce STEPS rest >> loop mode
    -- Just (':':'r':' ':rest) -> evalOnce REDUCE rest >> loop mode
    -- Just (':':'p':' ':rest) -> evalOnce PRINT rest >> loop mode
    -- Just (':':'e':'q':' ':rest) -> evalOnce EQUIV rest >> loop mode
    -- Just (':':'s':' ':rest) -> evalOnce SHOW rest >> loop mode
    -- Just input -> evalOnce mode input >> loop mode


-- pipeMaybe :: (Monad m) => (a -> m (Maybe b)) -> Maybe a -> m (Maybe b)
-- pipeMaybe f Nothing = return Nothing
-- pipeMaybe f (Just a) = f a

-- substitute :: Lambda -> Variable -> Lambda -> Lambda
-- substitute l var expr = substitute' var expr l
--   -- | var `member` boundVarSet l = l
--   -- | otherwise = substitute' var (moveBoundVars expr (totalVarSet l)) (moveBoundVars l (freeVarSet expr))
--   where
--     -- bvs = boundVarSet l
--     substitute :: Variable -> Lambda -> Lambda -> Lambda
--     substitute m l' (Var n)
--       | n == m = l'
--       | otherwise = Var n
--     substitute m l2' (Abst n l1')
--       | n == m = Abst n l1'
--       | n `member` exprtvs = Abst n' (substitute m l2' (substituteVar l1' n n'))
--         where
--           exprtvs = totalVarSet l2'
--           n' = 1 + max (findMax $ totalVarSet l1') (findMax exprtvs)
--     substitute m l' (Appl l1' l2') = Appl (substitute m l' l1') (substitute m l' l2')
    -- exprfvs = freeVarSet expr
    -- exprtvs = totalVarSet expr
      -- | n == m = Abst n src'
      -- | n `member` exprtvs = Abst n' (substitute' (substituteVar src' n n') m expr')
      -- | otherwise = Abst n (substitute' src' m expr')
        -- where
        --   n' = 1 + max (findMax $ totalVarSet src') (findMax exprtvs)


  -- | char == '\'' = 
  --   let f :: Int -> String -> Maybe Lambda
  --       f n ('\'' : rest') = f (n+1) rest'
  --       f n ('.' : rest') = raise Abst (Just n) (parse' rest')
  --       f _ _ = Nothing
  --    in f 1 rest
          -- else evalOnce PRINT empty lstr
          -- else do--return $ Content lstr
          --   outputStrLn $ "| " ++ replicate promptLength '-'
          --   evalOnce PRINT empty lstr

-- substitute :: Lambda -> Variable -> Lambda -> Lambda
-- substitute (Var n) m expr
--   | n == m = expr
--   | otherwise = Var n
-- substitute (Abst n src) m expr
--   | n == m = Abst n src
--   | n `member` exprtvs = Abst n' (substitute (substituteVar src n n') m expr)
--   | otherwise = Abst n (substitute src m expr)
--     where
--       exprtvs = totalVarSet expr
--       n' = 1 + max (findMax $ totalVarSet src) (findMax exprtvs)
-- substitute (Appl src1 src2) m expr = Appl (substitute src1 m expr) (substitute src2 m expr)

-- evalOnce :: Mode -> String -> InputT IO ()
-- evalOnce PRINT = io (("| " ++) . color "34" . unparse') . parse'
-- evalOnce REDUCE = io (("| " ++) . color "34" . unparse' . reduce) . parse'
-- evalOnce STEPS = io' . parse'
--   where
--     io' :: Maybe Lambda -> InputT IO ()
--     io' Nothing = outputStrLn $ color "1;31" "error:" ++ " Incorrect syntax."
--     io' (Just l) = showSteps l
--     showSteps :: Lambda -> InputT IO ()
--     showSteps l
--       | found = do
--         outputStr $ "| " ++ color "34" (unparse' l')
--         _ <- getInputLine ""
--         showSteps l'
--       | otherwise = return ()
--       where
--         (l', found) = reduceStep l
-- evalOnce EQUIV = showEquiv
--   where
--     io' :: Maybe Bool -> InputT IO ()
--     io' Nothing = outputStrLn $ color "1;31" "error:" ++ " Incorrect syntax."
--     io' (Just b) = outputStrLn . ("| " ++) . color "33" . show $ b
--     showEquiv :: String -> InputT IO ()
--     showEquiv str1 = do
--       let ml1 = parse' str1
--       str2 <- getInputLine $ "  (" ++ color "37" "AND" ++ "): "
--       let ml2 = str2 >>= parse'
--       io' $ raise equiv' ml1 ml2
-- evalOnce SHOW = io (("| " ++) . color "35" . show) . parse'

-- withThree :: (String -> String -> String -> Maybe String) -> (String, String) -> String -> InputT IO (Maybe String)
-- withThree f (prompt1, prompt2) str1 = do
--   mstr2 <- getInputLine $ "  (" ++ color "33" prompt1 ++ "): "
--   case mstr2 of
--     Nothing -> printLn (Just "Aborted.")
--     Just [] -> printLn Nothing
--     Just str2 -> do
--       mstr2' <- eval RETURN str2
--       case mstr2' of
--         Nothing -> return Nothing
--         Just str2' -> do
--           mstr3 <- getInputLine $ "  (" ++ color "33" prompt2 ++ "): "
--           case mstr3 of
--             Nothing -> printLn (Just "Aborted.")
--             Just [] -> printLn Nothing
--             Just str3 -> do
--               mstr3' <- eval RETURN str3
--               printLn $ mstr3' >>= f str1 str2'


  -- | TOFORMAL | TOINFORMAL

    -- ("tf", "toformal", TOFORMAL, "converts to the formal notation"),
    -- ("ti", "toinformal", TOINFORMAL, "converts to the informal notation"),

-- evalOnce TOFORMAL = (printLn . fmap unparseFormal) <.> parseWithBindings'
-- evalOnce TOINFORMAL = (printLn . fmap (unparse True False)) <.> parseWithBindings'

-- import System.Environment (getArgs)

-- unparseFormal :: Lambda -> String
-- unparseFormal (Var n) = varSetFormal !! n
-- unparseFormal (Abst n l) = "(\\" ++ unparseFormal (Var n) ++ unparseFormal l ++ ")"
-- unparseFormal (Appl l1 l2) = "(" ++ unparseFormal l1 ++ unparseFormal l2 ++ ")"


-- main = do
--   args <- getArgs
--   let opts = parseOptions args
--   runInputT settings $ case opts of
--     Options { errorOpt = Just str } -> printError "Unrecognized option" str "main"
--     Options { helpOpt = True } -> helpAction
--     _ -> loop (modeOpt opts) [] empty

-- data Options = Options {
--     helpOpt :: Bool,
--     modeOpt :: Mode,
--     errorOpt :: Maybe String
--   }
--
-- parseOptions :: [String] -> Options
-- parseOptions [] = Options { helpOpt = False, modeOpt = REPEAT, errorOpt = Nothing }
-- parseOptions (opt:rest)
--   | opt == "-h" || opt == "--help" = (parseOptions rest) { helpOpt = True }
--   | (opt == "-m" || opt == "--mode") && not (null rest) && member mode modeMap =
--     (parseOptions (tail rest)) { modeOpt = modeMap ! mode }
--   | otherwise = Options { errorOpt = Just opt, helpOpt = False, modeOpt = REPEAT }
--   where
--     mode = head rest

-- wrapNotVar :: (Lambda -> String) -> Lambda -> String
-- wrapNotVar f (Var n) = f (Var n)
-- wrapNotVar f l = "(" ++ f l ++ ")"
